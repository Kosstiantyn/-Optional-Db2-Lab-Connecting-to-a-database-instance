WEBVTT

1
00:00:00.000 --> 00:00:02.680
Здравствуйте и добро пожаловать на создание таблиц,

2
00:00:02.680 --> 00:00:04.935
загрузку данных и запрос данных.

3
00:00:04.935 --> 00:00:06.730
После завершения этого урока

4
00:00:06.730 --> 00:00:11.390
вы сможете понять основные понятия, связанные с созданием таблиц, загрузкой данных

5
00:00:11.390 --> 00:00:13.800
и запросом данных с помощью Python,

6
00:00:13.800 --> 00:00:17.780
а также продемонстрировать пример выполнения этих задач с помощью

7
00:00:17.780 --> 00:00:22.735
базы данных IBM DB2 on Cloud и ноутбуков Jupyter.

8
00:00:22.735 --> 00:00:27.500
Для этого примера мы будем использовать DB2 в качестве базы данных.

9
00:00:27.500 --> 00:00:31.385
Сначала мы получаем ресурс подключения, подключившись к базе данных

10
00:00:31.385 --> 00:00:36.115
с помощью метода connect ibm_db api.

11
00:00:36.115 --> 00:00:40.095
Существуют различные способы создания таблиц в DB2.

12
00:00:40.095 --> 00:00:43.775
Один из них использует веб-консоль, предоставляемую DB2,

13
00:00:43.775 --> 00:00:48.885
а другой вариант - создавать таблицы из любых сред SQL, R или Python.

14
00:00:48.885 --> 00:00:54.020
Давайте посмотрим, как создавать таблицы в DB2 из нашего приложения Python.

15
00:00:54.020 --> 00:00:57.465
Вот примерная таблица базы данных коммерческих грузовиков.

16
00:00:57.465 --> 00:01:02.790
Давайте посмотрим, как мы можем создать таблицу Trucks в DB2 с помощью кода Python.

17
00:01:02.790 --> 00:01:04.295
Для создания таблицы

18
00:01:04.295 --> 00:01:12.170
мы используем функцию ibm_db.exec_memorial.

19
00:01:12.170 --> 00:01:15.570
Параметры функции - соединение,

20
00:01:15.570 --> 00:01:22.150
которое является допустимым ресурсом подключения к базе данных, возвращаемым из

21
00:01:22.150 --> 00:01:24.890
оператора ibm_db.connect или ibm_db.pconnect,

22
00:01:24.890 --> 00:01:28.550
который представляет собой строку, содержащую инструкцию SQL,

23
00:01:28.550 --> 00:01:32.885
и параметры, которые являются необязательным параметром, включающим , определяющий тип курсора, возвращаемого для наборов результатов.

24
00:01:32.885 --> 00:01:36.810
Вот код для создания таблицы под названием Trucks в Python.

25
00:01:36.810 --> 00:01:45.285
Мы используем ibm_db.exec_memorial функцию ibm_db api.

26
00:01:45.285 --> 00:01:50.550
Созданный ресурс подключения передается в качестве первого параметра этой функции.

27
00:01:50.550 --> 00:01:53.255
Следующим параметром является оператор SQL,

28
00:01:53.255 --> 00:01:57.250
который представляет собой запрос создания таблицы, используемый для создания таблицы Trucks.

29
00:01:57.250 --> 00:02:00.285
Новая таблица, созданная будет иметь пять столбцов,

30
00:02:00.285 --> 00:02:03.550
serial_no будет первичным ключом.

31
00:02:03.550 --> 00:02:05.930
Теперь давайте посмотрим на загрузку данных.

32
00:02:05.930 --> 00:02:13.030
Мы используем ibm_db.exec_memorial функцию ibm_db api.

33
00:02:13.030 --> 00:02:18.375
Созданный ресурс подключения передается в качестве первого параметра этой функции.

34
00:02:18.375 --> 00:02:20.910
Следующим параметром является оператор SQL,

35
00:02:20.910 --> 00:02:25.345
который является вставкой в запрос, используемый для вставки данных в таблицу Trucks.

36
00:02:25.345 --> 00:02:27.930
Новая строка будет добавлена в таблицу Trucks.

37
00:02:27.930 --> 00:02:35.890
Аналогичным образом, мы добавляем больше строк в таблицу Trucks с помощью функции ibm_db.exec_immerial.

38
00:02:35.890 --> 00:02:38.320
Теперь, когда ваш код Python был подключен к

39
00:02:38.320 --> 00:02:43.080
экземпляру базы данных, а таблица базы данных была создана и заполнена данными,

40
00:02:43.080 --> 00:02:46.040
давайте посмотрим, как мы можем извлечь данные из таблицы Trucks, которую мы

41
00:02:46.040 --> 00:02:49.385
создали на DB2 с помощью кода Python.

42
00:02:49.385 --> 00:02:56.820
Мы используем ibm_db.exec_memorial функцию ibm_db api.

43
00:02:56.820 --> 00:03:02.560
Созданный ресурс подключения передается в качестве первого параметра этой функции.

44
00:03:02.560 --> 00:03:05.175
Следующим параметром является оператор SQL,

45
00:03:05.175 --> 00:03:07.465
который является выборка из таблицы запроса.

46
00:03:07.465 --> 00:03:09.975
Код Python возвращает вывод,

47
00:03:09.975 --> 00:03:13.250
который показывает поля данных в таблице Trucks.

48
00:03:13.250 --> 00:03:17.315
Вы можете проверить правильность вывода, возвращаемого запросом выбора,

49
00:03:17.315 --> 00:03:20.370
обратившись к консоли DB2.

50
00:03:20.370 --> 00:03:25.290
Давайте посмотрим, как мы можем использовать панды для извлечения данных из таблиц базы данных.

51
00:03:25.290 --> 00:03:28.520
Pandas - это популярная библиотека Python, которая содержит

52
00:03:28.520 --> 00:03:30.730
структуры данных высокого уровня и

53
00:03:30.730 --> 00:03:35.660
инструменты манипуляции, предназначенные для быстрого и простого анализа данных в Python.

54
00:03:35.660 --> 00:03:39.710
Мы загружаем данные из таблицы Trucks в фрейм данных под названием DF.

55
00:03:39.710 --> 00:03:42.670
Фрейм данных представляет собой табличную электронную таблицу, как

56
00:03:42.670 --> 00:03:45.800
структуру данных, содержащую упорядоченную коллекцию столбцов,

57
00:03:45.800 --> 00:03:48.255
каждый из которых может быть разным типом значений.

58
00:03:48.255 --> 00:03:51.070
Спасибо, что посмотрели это видео.